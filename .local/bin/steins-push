#!/usr/bin/env bash
set -euo pipefail
say(){ printf "\033[1;36m[SG-PUSH]\033[0m %s\n" "$*"; }
ok(){ printf "\033[1;32m✔\033[0m %s\n" "$*"; }
warn(){ printf "\033[1;33m⚠\033[0m %s\n" "$*"; }

TS="$(date +%Y%m%d-%H%M%S)"; HOST="$(hostname)"
BACKUP_DIR="$HOME/Backups/SteinsGateOS"
REPO_DIR="$HOME/SteinsGateOS"
STAGE="$HOME/.cache/sgos_stage"
REMOTE_FILE="$HOME/.config/sgos_remote"
mkdir -p "$BACKUP_DIR" "$REPO_DIR" "$STAGE" "$HOME/.config"

need(){ command -v "$1" >/dev/null 2>&1 || { warn "Missing $1, installing"; sudo apt -y update && sudo apt -y install "$1" || true; }; }
need git; need rsync; command -v dconf >/dev/null 2>&1 || true

# helper: copy and ensure parent dir
copy(){ dest="$STAGE/$2"; mkdir -p "$(dirname "$dest")"; [ -e "$1" ] && rsync -a "$1" "$dest" || warn "Skip: $1"; }

say "Staging…"; rm -rf "$STAGE"; mkdir -p "$STAGE"

# USER SPACE
copy "$HOME/.config/conky/steinsgate.conf"                        ".config/conky/steinsgate.conf"
copy "$HOME/.config/conky/steinsgate_chaos.conf"                  ".config/conky/steinsgate_chaos.conf"
copy "$HOME/.config/conky/memory_nodes.txt"                       ".config/conky/memory_nodes.txt"
copy "$HOME/.config/autostart/conky-steinsgate.desktop"           ".config/autostart/conky-steinsgate.desktop"
copy "$HOME/.config/autostart/sg-login-sound.desktop"             ".config/autostart/sg-login-sound.desktop"
copy "$HOME/.config/systemd/user/sg-logout-sound.service"         ".config/systemd/user/sg-logout-sound.service"
copy "$HOME/.config/systemd/user/sg-wall.service"                 ".config/systemd/user/sg-wall.service"
copy "$HOME/.config/systemd/user/sg-wall.timer"                   ".config/systemd/user/sg-wall.timer"
copy "$HOME/.local/bin/sg-mode"                                   ".local/bin/sg-mode"
copy "$HOME/.local/bin/sg-rescue"                                 ".local/bin/sg-rescue"
copy "$HOME/.local/bin/steins-pull"                               ".local/bin/steins-pull"
copy "$HOME/.local/bin/sg-wall"                                   ".local/bin/sg-wall"
copy "$HOME/.local/bin/steins-push"                               ".local/bin/steins-push"
copy "$HOME/.local/share/applications/sg-mode-public.desktop"     ".local/share/applications/sg-mode-public.desktop"
copy "$HOME/.local/share/applications/sg-mode-lab.desktop"        ".local/share/applications/sg-mode-lab.desktop"
copy "$HOME/.local/share/applications/sg-mode-chaos.desktop"      ".local/share/applications/sg-mode-chaos.desktop"
[ -d "$HOME/Pictures/SteinsGate-Wallpapers" ] && rsync -a "$HOME/Pictures/SteinsGate-Wallpapers" "$STAGE/Pictures/" || warn "No wallpapers folder"
copy "$HOME/.bashrc"                                              ".bashrc"

# SYSTEM OVERLAY
mkdir -p "$STAGE/etc-overlay/grub" "$STAGE/etc-overlay/systemd/sg-boot" "$STAGE/etc-overlay/motd.d"
[ -f /usr/share/images/grub/steinsgate.png ] && sudo rsync -a /usr/share/images/grub/steinsgate.png "$STAGE/etc-overlay/grub/"
[ -f /etc/default/grub ] && sudo rsync -a /etc/default/grub "$STAGE/etc-overlay/grub/default"
for s in sg-boot-early.service sg-boot-late.service; do
  [ -f "/etc/systemd/system/$s" ] && sudo rsync -a "/etc/systemd/system/$s" "$STAGE/etc-overlay/systemd/sg-boot/"
done
[ -f /etc/issue ] && sudo rsync -a /etc/issue "$STAGE/etc-overlay/issue"
[ -f /etc/motd.d/10-steinsgate ] && sudo rsync -a /etc/motd.d/10-steinsgate "$STAGE/etc-overlay/motd.d/"

( sudo plymouth-set-default-theme >/dev/null 2>&1 || true )
( sudo plymouth-set-default-theme 2>/dev/null || echo unknown ) | sed 's/Current theme://' | xargs echo > "$STAGE/etc-overlay/plymouth-theme.txt" || echo unknown > "$STAGE/etc-overlay/plymouth-theme.txt"

# DC0NF EXPORTS
mkdir -p "$STAGE/dconf"
( dconf dump /org/cinnamon/ > "$STAGE/dconf/cinnamon.dconf" ) || true
( dconf dump /org/gnome/desktop/wm/keybindings/ > "$STAGE/dconf/wm-keybindings.dconf" ) || true

echo "SGOS-SNAPSHOT $TS @ $HOST" > "$STAGE/SNAPSHOT.txt"
ok "Stage built."

# TAR
tar -C "$STAGE" -czf "$BACKUP_DIR/sgos-${TS}-${HOST}.tar.gz" .
ok "Tarball saved"

# SYNC → REPO
say "Syncing → $REPO_DIR"
rsync -a --delete "$STAGE/." "$REPO_DIR/."

cd "$REPO_DIR"
[ ! -d .git ] && git init
git add -A
git commit -m "Full snapshot $TS @ $HOST" || true
git branch -M main || true

# REMOTE handling (remembered URL)
if [ ! -s "$REMOTE_FILE" ]; then
  if git remote -v | grep -q '^origin'; then
    git remote get-url origin > "$REMOTE_FILE" || true
  fi
fi
if [ -s "$REMOTE_FILE" ]; then
  url="$(cat "$REMOTE_FILE")"
  git remote remove origin 2>/dev/null || true
  git remote add origin "$url"
else
  warn "No remote set. Save one with:  echo 'https://github.com/USERNAME/REPO.git' > $REMOTE_FILE"
fi

# PUSH (force to make local the source of truth)
if git remote -v | grep -q '^origin'; then
  git push -u origin main --force || warn "Push failed"
else
  warn "Skipping push (no origin)."
fi

ok "Done."
